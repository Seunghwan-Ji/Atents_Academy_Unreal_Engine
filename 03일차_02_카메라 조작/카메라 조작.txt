1. 콘텐츠 드로어에서 입력 액션 추가.
- 이름 예: IA_Look
2. 액션 -> 값 타입 -> 2차원 벡터.
3. 트리거 추가 -> 다운.
4. 만들어둔 IMC_Default 입력 매핑 컨텍스트에서 매핑 추가 -> IA_Look.
5. None 클릭 -> 2d 검색 -> 마우스 XY 2D 축.
- 카메라 화면은 두 축으로만 움직이기 때문에 2D.
- 기본적으로 카메라의 회전은 플레이어 컨트롤러의 회전값이 반영되어 따라감.
- 플레이어 컨트롤러의 회전은 IA_Look 의 Vector2D 값을 받아서 이루어짐.
- 마우스를 좌우로 움직이면 Z축(Yaw) 회전이되고, 상하로 움직이면 Y축(Pitch) 회전이됨.
6. BP_PlayerController 플레이어 컨트롤러 클래스 이벤트 그래프에서 노드 검색 -> IA_Look -> EnhancedInputAction 노드 추가.
7. AddYawInput, AddPitchInput 노드 추가 후, EnhancedInputAction -> AddYawInput -> AddPitchInput 순으로 핀 연결.
- Y축 회전을 Pitch, Z축 회전을 Yaw 라고 부름.
8. ActionValue 핀을 분할해서 X핀은 Yaw 노드쪽으로, Y핀은 Pitch 노드쪽으로 연결. (val 핀)
9. BP_Character 캐릭터 클래스 -> 컴포넌트 추가 -> springarm.
10. Camera 컴포넌트를 드래그해서 SpringArm 으로 이동.
- SpringArm 컴포넌트는 Camera 컴포넌트와 마찬가지로 플레이어 컨트롤러의 회전값이 반영되어 회전됨.
- Camera 컴포넌트는 SpringArm 컴포넌트의 자식으로 속해있으면 SpringArm 의 트랜스폼을 변경 시 같이 적용됨.
- SpringArm 컴포넌트의 디테일 옵션: 트랜스폼 항목은 빨간선(SpringArm) 시작 부분의 값을 조절하고, 카메라 소켓 오프셋은 빨간선 끝 부분의 값을 조절함.
12. SpringArm 컴포넌트 -> 디테일 -> 카메라 세팅 -> 폰 제어 회전 사용 체크.
- 카메라가 물체와 충돌을 피하는 기능이 있음.
- 예를들어 카메라가 하늘을 보는 과정은 스프링암 빨간선을 캐릭터와 가깝게 좁혀서 하늘을 비춤으로 인해 바닥과 카메라의 충돌을 방지함.
- Camera 컴포넌트 -> 디테일 -> 카메라 옵션 -> 폰 제어 회전 사용 체크 해제 확인.
- BP_Character 캐릭터 클래스 -> 클래스 디폴트 -> 디테일 -> 폰 -> 롤 회전, 피치 회전, 요 회전 모두 체크 해제 확인.
13. IA_Look 입력 액션 -> 액션 -> 모디파이어 추가 -> 부정 -> 인덱스 -> Y 빼고 모두 체크 해제.
14. IA_Look 입력 액션 -> 트리거 -> 인덱스 -> 작동 한계치 -> 0.0
- 마우스를 아주 천천히 움직이면 카메라가 안 움직이는걸 해결함.
- 데드존 개념. 0 ~ 1 사이 값을 부여할 수 있고, 마우스로 움직여 부여한 값 이상 범위를 벗어나면 카메라가 움직이는 원리.
- 데드존은 게임패드의 스틱에서 유래됨.
- 데드존이 0이라면 게임패드의 스틱이 헐거워졌을 때 스틱을 가만히 둬도 정 가운데에 있지않아 데드존을 벗어난 상태가 유지되기 때문에 데드존 수치를 조절할 수 있도록함.