1. 점프 애니메이션 에셋 추가하기.
- 에셋이 들어있는 프로젝트 실행 -> 콘텐츠 드로어 -> 콘텐츠 폴더 우클릭 -> 이주 -> 본 프로젝트의 콘텐츠 경로로 이동.
- 본 프로젝트로 돌아가서 콘텐츠 드로어에 에셋이 들어왔는지 확인.
2. BP_Character -> 컴포넌트 -> 메시 컴포넌트 -> 디테일 -> 메시 -> 스켈레탈 메시 에셋 이미지 더클클릭 -> 우측 상단 뼈대 모양 버튼 클릭후 좌측 탭 확인.
- 메시 컴포넌트는 스켈레탈 메시 컴포넌트라고도 부름.
- 스켈레탈 메시 컴포넌트에는 스켈레톤(골격) 에셋이 있고, 이 본 클래스(뼈 모양 클래스)들의 집합이 스켈레톤 에셋임.
- 본 클래스들은 서로 상속 관계로 이어져 있음.
- 따라서 특정 본이 움직이면 그 본으로부터 상속받은 본들도 따라서 움직임. (애니메이션 에셋에서 캐릭터 -> 모든 계층구조 표시를 눌러 확인.)
- 애니메이션은 스켈레톤에 의존함.
- 애니메이션은 본 들의 움직임을 저장해 놓았기 때문.
3. 콘텐츠 드로어에서 애니메이션 에셋 더블클릭 -> 스켈레톤을 추가하겠냐는 창이 뜨면 수락 -> 애니메이션과 적합한 스켈레톤 에셋 선택.
- 스켈레톤 에셋을 다른걸 적용하고 싶거나 잘못 적용했으면, 에셋 우클릭 -> 스켈레톤 대체.
- 만약 대체했을 때 애니메이션이 동작하지 않으면 애니메이션 트랙이 깨진 것이므로 다시 에셋 프로젝트에서 에셋을 이주해 와서 진행해야함.
4. 콘텐츠 드로어 -> 입력 액션 추가.
- 이름 예시: IA_Jump
5. IA_Jump -> 트리거 -> 다운 선택.
6. 콘텐츠 드로어 -> IMC_Default -> 매핑 추가 -> IA_Jump -> 키 매핑 -> space.
7. BP_PlayerController -> 이벤트 그래프 -> 노드 검색 -> EnhancedInputAction IA_Jump 추가.
8. 노드 검색 -> Get Controlled Pawn 추가.
9. Get Controlled Pawn 출력핀 당겨서 노드 검색 -> Cast To Character 추가.
- Pawn은 레벨에 배치하는 기능이 있지만 물리적 기능은 없기 때문에, 캐릭터 무브먼트 기능이 있는 Character 로 다운 캐스팅함.
- 다운 캐스팅은 상위 클래스의 기능을 수행할 것이라는 보장이 없기 때문에 출력핀이 성공 또는 실패 두 분기로 나뉨.
10. As캐릭터 핀을 당겨서 노드 검색 -> Jump 추가.
- 캐릭터의 점프 기능 가져오기.
- 점프력 설정은 BP_Character -> 컴포넌트 -> 캐릭터 무브먼트 -> 디테일 -> 캐릭터 무브먼트: 점프/낙하 -> 점프 Z 속도 수치 조정. (예: 600)
11. ABP_Character -> AnimGraph -> Tutorial -> 에셋 브라우저 검색 -> Common_Jump_Start, Common_Jump_Loop, Common_Jump_End -> 그래프에 드래그 배치.
노드 이름 예시: Jump_Start, Jump_Loop, Jump_End
12. Jump_Start -> Jump_Loop -> Jump_End 순으로 간선 연결.
13. 그래프 우클릭 -> 컨듀잇 추가.
- 이름 예시: IsFalling
- 컨듀잇은 여러 노드의 공통 조건을 처리함.
14. Idle, Walk, Run 노드 전부 IsFalling 노드에 연결 후 각 간선의 트랜지션 룰 버튼 더블클릭 -> Result 노드 체크.
- Result 를 체크하면 별도 조건 없이 간선과 이어진 노드로 전이됨.
15. IsFalling 더블클릭 -> Result 노드 선택 -> 디테일 -> 결과 -> 트랜지션 시작 가능 -> TryGetPawnOwner -> GetMovementComponent -> IsFalling 선택.
16. IsFalling 노드를 Jump_Start 노드에 연결.
- 캐릭터의 IsFalling 이 True 이면 점프 애니메이션이 시작하도록 유도.
17. IsFalling -> Jump_Start -> JumpLoop -> Jump_End: 이 간선들의 트랜지션 룰도 Result 노드 체크.
18. Jump_Start -> Jump_Loop 트랜지션 룰 선택 -> 디테일 -> 트랜지션 -> 스테이트의 시퀸스 플레이어에 따른 자동 규칙 체크.
- 애니메이션 재생이 끝나면 다음 노드의 애니메이션 재생으로 실행해주는 기능.
19. Jump_Loop -> Jump_End 트랜지션 룰 버튼 더블클릭 -> Result 선택 -> 디테일 -> 트랜지션 시작 가능 -> GetMovementComponent -> IsMovingOnGround 선택.
- 캐릭터가 지면에 닿은 상태가 True 일 때 Jump_End 애니메이션 재생 유도.
20. Jump_Loop 노드 더블클릭 -> Common_Jump_Loop 노드 선택 -> 디테일 -> 애니메이션 루프 체크.
21. Jump_End 노드와 Idle 노드 연결 후 트랜지션 룰 버튼 선택 -> 디테일 -> 스테이트의 시퀸스 플레이어에 따른 자동 규칙 체크.

### 에일리어스 노드를 활용한 버전으로 수정하기
22. 그래프 우클릭 -> 스테이트 에일리어스 추가.
- 이름 예시: ToGround
23. ToGround 선택 -> 디테일 -> 스테이트 에일리어스 -> Jump_End 체크.
24. ToGround -> Idle 노드 연결 -> 트랜지션 룰 선택 -> 디테일 -> 스테이트의 시퀸스 플레이어에 따른 자동 규칙 체크.
25. Jump_End -> Idle 간선 끊기.
- 이제 Toground 가 Jump_End 노드의 역할을 대신함.